************************************************以此项目为例进行SpringMVC-RESTful风格编程********************************************************************

模式介绍：目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。
	（1）每一个URI 代表一种资源；
	（2）客户端和服务器之间，传递这种资源的某种表现层；
	（3）客户端通过四个HTTP 动词，对服务器端资源进行操作，实现"表现层状态转化"。
	


配置操作：
1.修改web.xml 文件中DispatcherServlet 中映射路径把*.action替换为/
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
2.在applicationContext-springmvc.xml 文件中修改对静态资源的引用
	<mvc:resources location="/css/" mapping="/css/**"/>
	<mvc:resources location="/fonts/" mapping="/fonts/**"/>
	<mvc:resources location="/js/" mapping="/js/**"/>
	
3.修改jsp页面，做一些替换操作，比如：
	（1） "${pageContext.request.contextPath }/emp/toupdate.action?empno=${emp.empno }" 替换为 "${pageContext.request.contextPath }/emp/toupdate/${emp.empno }"
	（2） "${pageContext.request.contextPath }/emp/toupdate.action?empno=${emp.empno }&ename=${emp.ename }" 
			替换为 "${pageContext.request.contextPath }/emp/toupdate/${emp.empno }/${emp.ename }"
			
4.修改Controller 层
	@RequestMapping("/toupdate/{empno}")
	public String delete(@PathVariable() int empno) throws SQLException {
		xxxxxxxxxx
		return "redirect:/emp/list";
	}
	
	@RequestMapping("/toupdate/{empno}/{ename}")
	public String delete(@PathVariable() int empno, String ename) throws SQLException {
		xxxxxxxxxx
		return "redirect:/emp/list";
	}